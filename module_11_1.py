# Домашнее задание по теме "Обзор сторонних библиотек Python"
# Выберите одну или несколько сторонних библиотек Python, например, requests, pandas, numpy, matplotlib, pillow.
# После выбора библиотек(-и) изучите документацию к ней(ним), ознакомьтесь с их основными возможностями и функциями.

# requests - запросить данные с сайта и вывести их в консоль.
""" Библиотека Requests """
# Requests в основном предназначена для работы с HTTP-запросами:
# GET, POST, PUT, DELETE и другими, для управления сеансами, обработки заголовков,
# форматов данных (включая JSON), аутентификации и обработки ошибок.

import requests


# ПРИМЕРЫ:
# Отправка HTTP-запросов для получения или отправки данных на сервер.
# 1. GET запрос

def get_data(url):
    response = requests.get(url)
    if response.status_code == 200:                 # Функция проверяет, успешен ли запрос.
                                                    # Код статуса 200 указывает на успешный ответ от сервера.
        return response.json()                      # возвращает JSON-ответ
    else:
        return f"Ошибка: {response.status_code}"    # Если код статуса не равен 200, функция возвращает
                                                    # строку с сообщением об ошибке.


data = get_data('https://requests.readthedocs.io/data')     # Функция вызывается с заданным URL
print(data)                                                 # и результат выводится в консоль.


# 2. POST запрос

def post_data(url, payload):                # Функция принимает url-адрес, на который отправляется POST-запрос и
                                            # payload - данные, которые нужно отправить (обычно в формате JSON).
    response = requests.post(url, json=payload)     # Здесь используется библиотека requests для отправки POST-запроса.
                                            # Параметр json=payload автоматически конвертирует payload в JSON-формат.
    if response.status_code == 201:         # после отправки запроса проверяется статус-код ответа.
                                            # 201 означает, что ресурс был успешно создан на сервере.
        return response.json()              # Функция возвращает данные ответа в формате JSON.
    else:
        return f"Ошибка: {response.status_code}"    # Если статус-код не равен 201, функция возвращает сообщение об ошибке


payload = {'login': 'Vita2345', 'password': 'gXie7-yDq9vT$sm'}  # здесь создается словарь с логином и паролем,
                                                                # который будет отправлен.
response_data = post_data('https://www.adobe.com/ru/users', payload)    # вызывается функция post_data с URL и данными.
print(response_data)                                                    # выводим результат работы функции.

# Функция, демонстрирующая использование сессий для сохранения состояния между запросами,
# а также добавление пользовательских заголовков:

def session_request(url):
    with requests.Session() as session:     # Создаётся объект сессии с помощью requests.Session().
                                    # Использование with гарантирует, что сессия будет автоматически закрыта
                                    # после завершения блока кода, что помогает управлять ресурсами и освобождать их.
        session.headers.update({'Authorization': '31815BAD8901D51DEEAA3FEC7103CF81'})
                                    # В сессию добавляется заголовок Authorization с токеном.
                                    # Это может использоваться для авторизации пользователя на сервере.
                                    # Все запросы, сделанные из этой сессии, будут автоматически включать
                                    # этот заголовок.
        response = session.get(url)         # Здесь в переменной response сохраняется результат GET-запроса
                                            # к указанному URL.
        if response.status_code == 200:     # Если статус-код ответа равен 200, функция возвращает данные
            return response.json()          # в формате JSON, полученные от сервера, с помощью метода response.json().
        else:
            return f"Ошибка: {response.status_code}"    # Если статус-код не равен 200, функция возвращает строку
                                            # с сообщением об ошибке, содержащую фактический код состояния ответа
                                            # (например, "Ошибка: 404", что означает, что ресурс не найден).

data = session_request('https://fusionbrain.ai/secure-data')
                                            # Здесь вызывается функция session_request с переданным URL.
                                            # Результат, полученный из функции, сохраняется в переменной data
print(data)                                 # и выводится на экран.
# Эта функция полезна для работы с API, которые требуют авторизации через токены.
# Использование сессии делает код более чистым и эффективным,
# так как не нужно повторно указывать заголовки или куки для каждого запроса.
# -------------------------------

import pandas as pd

# pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение), вывести результаты в консоль.
"""Pandas — это мощная библиотека для анализа данных в Python,
которая предоставляет удобные инструменты для работы с табличными данными."""
# Она широко используется в таких областях, как наука о данных, машинное обучение, финансовая аналитика
# и другие сферы, где требуется обработка больших объемов структурированных данных.
# Основные компоненты библиотеки:
"""DataFrame"""
# DataFrame — основной объект в Pandas, представляющий собой двумерный массив данных, который напоминает таблицу
# базы данных или электронную таблицу Excel. Он состоит из строк и столбцов, каждый из которых может иметь свой
# собственный индекс и имя.
"""Series"""
# Series — одномерный массив данных, который представляет собой столбец таблицы.
# В отличие от списка, он имеет индексы, что позволяет обращаться к элементам по их позициям.
# ПРИМЕР создания Series:
s = pd.Series([10, 20, 30], index=['a', 'b', 'c'])
print(s)

# ПРИМЕР: Запись данных в файл CSV

# Создание DataFrame
data = {
    'Возраст': [28, 35, 24, 32, 20, 36],
    'Имя': ['Антон', 'Александра', 'Пётр', 'Кирилл', 'Анна', 'Ольга'],
    'Фамилия': ['Сидоров', 'Соколова', 'Козлов', 'Никитин', 'Попова', 'Петрова'],
    'Город': ['Москва', 'Волгоград', 'Самара', 'Волгоград', 'Москва', 'Самара']
}
df = pd.DataFrame(data)

# Запись DataFrame в новый CSV файл
df.to_csv('new_file.csv', index=False)

# ПРИМЕР: Запись в Excel файл

# Создание DataFrame
data = {
    'Возраст': [28, 35, 24, 32, 20, 36],
    'Имя': ['Антон', 'Александра', 'Пётр', 'Кирилл', 'Анна', 'Ольга'],
    'Фамилия': ['Сидоров', 'Соколова', 'Козлов', 'Никитин', 'Попова', 'Петрова'],
    'Город': ['Москва', 'Волгоград', 'Самара', 'Волгоград', 'Москва', 'Самара']
}
df = pd.DataFrame(data)

# Запись DataFrame в Excel файл
df.to_excel('data_table.xlsx', index=False)

# ПРИМЕР: Чтение данных и анализ

data = pd.read_csv('new_file.csv')      # Чтение данных из CSV файла

print("Данные из файла:")
print(data.head(6))

# С помощью groupby() группируем данные по колонке 'Город' и находим средний возраст.
average_age_by_city = data.groupby('Город')['Возраст'].mean()   # Метод .mean() применяется, чтобы вычислить среднее
                                                                # значение возрастов для каждого города.
print("\nСредний возраст по городу:")
for город, средний_возраст in average_age_by_city.items():
    print(f"Средний возраст в г. {город}: {средний_возраст:.2f}")

# --------------------------------------

import numpy as np

# numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль.
"""NumPy — это одна из основополагающих библиотек для численных вычислений в Python."""

# Она предоставляет поддержку многомерных массивов и матриц, а также разнообразные математические функции
# для их обработки.
# Основные особенности NumPy:
# 1. Массивы n-мерности:
# NumPy предоставляет объект ndarray, который является эффективным многомерным массивом, позволяющим хранить данные
# одного типа. Это обеспечивает более эффективные вычисления по сравнению с обычными списками Python.

# 2. Эффективные операции:
# NumPy поддерживает векторизированные операции, что позволяет выполнять операции на массивах без использования циклов.
# Это значительно ускоряет выполнение кода.

# 3. Арифметические и математические функции:
# Библиотека включает множество встроенных математических функций для выполнения различных операций, включая
# линейную алгебру, статистику и другие.

# Удобные функции для работы с данными:
# NumPy предоставляет функции для создания массивов, работы с линейной алгеброй, обработки случайных чисел и другие.

# Интеграция с другими библиотеками:
# NumPy является основой для многих других библиотек, таких как SciPy, pandas, Matplotlib и других.
# ПРИМЕР 1:
# Создание одномерного и двумерного массивов
arr1 = np.array([4, 2, 7, 9, 5, 3, 1, 6, 8])      # Одномерный массив
arr2 = np.array([[4, 8, 2, 6], [7, 1, 5, 3]])     # Двумерный массив

# Сортировка одномерного массива
sorted_arr1 = np.sort(arr1)
print("Отсортированный одномерный массив:", sorted_arr1)

# Сортировка двумерного массива
sorted_arr2 = np.sort(arr2, axis=1)         # С помощью параметра axis=1 сортируем массив по горизонтали (по строкам)
print("Отсортированный двумерный массив:", sorted_arr2.tolist())    # Выводим результат в одну строку, с помощью
                                            # метода tolist() преобразовываем двумерный массив ndarray
                                            # в список Python, сохраняя все данные и их структуру.

# ПРИМЕР 2:
# Анализ данных о продажах товаров в магазине.

# Создание массива цен товаров
prices = np.array([1549.99, 2319.50, 749.99, 9999.99, 4500.00, 10900.00, 5555.50, 6100.00])

# Анализ прайса (цен)
mean_price = np.mean(prices)                # Средняя цена
max_price = np.max(prices)                  # Максимальная цена
min_price = np.min(prices)                  # Минимальная цена
sorted_level_items = np.sort(prices[prices > 5000])     # Товары с ценой более 5000 руб.
                                                        # С сортировкой цен.

# Вывод результатов:
print(f'Средняя цена: {mean_price:.2f} рублей')
print(f'Максимальная цена: {max_price:.2f} рублей')
print(f'Минимальная цена: {min_price:.2f} рублей')
print("Товары дороже 5000 рублей:", ', '.join(f'{item:.2f}' for item in sorted_level_items))

# ПРИМЕР 3:
# Двумерные массивы:
arr3 = np.array([[4, 8, 2, 6], [7, 1, 5, 3]])
arr4 = np.array([[7, 1, 5, 3], [5, 2, 7, 4]])

# Выполнение математических операций
arr3_add = arr3[0] + arr4[0]                            # Действия сложения элементов массивов
arr3_subtract = np.abs(arr3[1] - arr4[1])               # Действия вычитания элементов массивов
arr4_multiply = arr4[0] * arr3[1]                       # Действия умножения элементов массивов
arr4_divide = np.abs(arr4[1] / (arr3[0] - arr4[1]))     # Действия деления элементов массивов

# Вывод результатов
print("Результат сложения элементов массивов:", arr3_add.tolist())
print("Результат вычитания элементов массивов:", arr3_subtract.tolist())
print("Результат умножения элементов массивов:", arr4_multiply.tolist())
print("Результат деления элементов массивов:", [round(float(value), 1) for value in arr4_divide.tolist()])

# В приложении к ссылке на GitHub напишите комментарий о возможностях, которые предоставила вам выбранная библиотека
# и как вы расширили возможности Python с её помощью.
# Примечания:
# Можете выбрать не более 3-х библиотек для изучения.
# Желательно продемонстрировать от 3-х функций/классов/методов/операций из каждой выбранной библиотеки.
